* Refactor various interfaces to be consistent. ATM there is a index-driven, class-based and struct-based approach.
* Think about making sub-objects sub-vessels
* Make coordinate system more generic. I.e. use INI structure to define hangar positions.
* Vertical launch facility wizard:
					1. Show wait-screen, if MLP is occupied already. If MLP is back in place, show list of vessels + "Load script..." entry.
					   If user selects vessel, or loaded script vessels, put it into place and attach it in default/script place.
					2. The detail screen offers position adjustment buttons to place the vessel on MLP and do roll-out. If rolled-out, the fuel
					   screen appears.
					3. The fuel-screen offers fuelling of each propellant tank and roll-in. If rolled-in again, position adjustment is shown again.
					   The countdown button here will ask for additional countdown value in seconds, showing "On hold for final count-down".
					   Including up to here, every screen offers "Abort", that will roll-in the MLP and delete the vessel again.
					4. In ATC menu, launch menu for VLF immediately retracts the gangways and rolls the MLP cover back in, giving "Final count-down"
					   screen with "T-<value+time for retract>", counting down. If vessel is not in launch position, show "Prepare stack".
					   If the countdown reaches zero, clock runs away with "T+" and starts
					   previously selected main engine (in details dialog). The exhaust deflection simulation kicks in. As soon as the vessel left
					   exhaust size area, exhaust simulation is disabled and screen shows "Clear launch area", showing "cleared" button. Pressing
					   the button returns the MLP animation (rolling cover out, rolling all in, deploy gangways again). After MLP is in place again,
					   launch in progress is cleared.
* Define "screen transition slots" for ATC chatter texts, read out by text2speech engine